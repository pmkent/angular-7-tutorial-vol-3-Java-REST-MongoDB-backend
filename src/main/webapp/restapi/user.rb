#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Com

module Pmk

module App

module Model

  # (no documentation provided)
  class User < Com::Pmk::App::Model::DAOBean 

    # (no documentation provided)
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :middleName
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :password
    # (no documentation provided)
    attr_accessor :token
    # (no documentation provided)
    attr_accessor :showpassword
    # (no documentation provided)
    attr_accessor :dateOfBirth
    # (no documentation provided)
    attr_accessor :gender

    # the json hash for this User
    def to_jaxb_json_hash
      _h = super
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['middleName'] = middleName.to_jaxb_json_hash unless middleName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['token'] = token.to_jaxb_json_hash unless token.nil?
      _h['showpassword'] = showpassword.to_jaxb_json_hash unless showpassword.nil?
      _h['dateOfBirth'] = dateOfBirth.to_jaxb_json_hash unless dateOfBirth.nil?
      _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
      return _h
    end

    #initializes this User with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Fixnum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['middleName'].nil?
          _oa = _o['middleName']
            if(_oa.is_a? Hash)
              @middleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @middleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @middleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @middleName.push String.from_json(_item)
                 else
                   @middleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @middleName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['token'].nil?
          _oa = _o['token']
            if(_oa.is_a? Hash)
              @token = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @token =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @token = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @token.push String.from_json(_item)
                 else
                   @token.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @token = _oa
            end
          end
        if !_o['showpassword'].nil?
          _oa = _o['showpassword']
            if(_oa.is_a? Hash)
              @showpassword = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @showpassword =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @showpassword = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @showpassword.push String.from_json(_item)
                 else
                   @showpassword.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @showpassword = _oa
            end
          end
        if !_o['dateOfBirth'].nil?
          _oa = _o['dateOfBirth']
            if(_oa.is_a? Hash)
              @dateOfBirth = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dateOfBirth =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dateOfBirth = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dateOfBirth.push Time.from_json(_item)
                 else
                   @dateOfBirth.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dateOfBirth = _oa
            end
          end
        if !_o['gender'].nil?
          _oa = _o['gender']
            if(_oa.is_a? Hash)
              @gender = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @gender =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @gender = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @gender.push String.from_json(_item)
                 else
                   @gender.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @gender = _oa
            end
          end
    end

    # constructs a User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Pmk

module App

module Model

  # (no documentation provided)
  class DAOBean 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :createDt
    # (no documentation provided)
    attr_accessor :updateDt
    # (no documentation provided)
    attr_accessor :updateBy
    # (no documentation provided)
    attr_accessor :deleteDt

    # the json hash for this DAOBean
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['createDt'] = createDt.to_jaxb_json_hash unless createDt.nil?
      _h['updateDt'] = updateDt.to_jaxb_json_hash unless updateDt.nil?
      _h['updateBy'] = updateBy.to_jaxb_json_hash unless updateBy.nil?
      _h['deleteDt'] = deleteDt.to_jaxb_json_hash unless deleteDt.nil?
      return _h
    end

    # the json (string form) for this DAOBean
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DAOBean with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['createDt'].nil?
          _oa = _o['createDt']
            if(_oa.is_a? Hash)
              @createDt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createDt =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createDt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createDt.push Time.from_json(_item)
                 else
                   @createDt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createDt = _oa
            end
          end
        if !_o['updateDt'].nil?
          _oa = _o['updateDt']
            if(_oa.is_a? Hash)
              @updateDt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateDt =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateDt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateDt.push Time.from_json(_item)
                 else
                   @updateDt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateDt = _oa
            end
          end
        if !_o['updateBy'].nil?
          _oa = _o['updateBy']
            if(_oa.is_a? Hash)
              @updateBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateBy.push String.from_json(_item)
                 else
                   @updateBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateBy = _oa
            end
          end
        if !_o['deleteDt'].nil?
          _oa = _o['deleteDt']
            if(_oa.is_a? Hash)
              @deleteDt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deleteDt =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deleteDt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deleteDt.push Time.from_json(_item)
                 else
                   @deleteDt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deleteDt = _oa
            end
          end
    end

    # constructs a DAOBean from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end
